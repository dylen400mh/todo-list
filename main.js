(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>u});var o=n(537),r=n.n(o),i=n(645),d=n.n(i),l=n(667),a=n.n(l),c=new URL(n(718),n.b),s=d()(r()),A=a()(c);s.push([e.id,`/* Set default font-family, font-weight, and other global styles */\n* {\n    font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu,\n        Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n    font-weight: 500;\n}\n\n/* Global styles for the body and grid layout */\nbody {\n    margin: 0;\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: auto 1fr;\n    min-height: 100vh;\n}\n\n/* HEADER */\n.header {\n    background: #1F9EFF;\n    font-size: 3rem;\n    grid-column: span 2;\n    grid-row: 1 / 2;\n    color: white;\n    padding: 1rem 5rem;\n}\n\n/* SIDEBAR */\n\n.sidebar {\n    background: #ADDCFF;\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    color: gray;\n    font-size: 1.5rem;\n    padding: 2rem;\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    min-width: 200px;\n}\n\n\n.sidebar span {\n    align-self: center;\n}\n\n/* Styling for filters and projects sections within the sidebar */\n.filters,\n.projects {\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n}\n\n/* Styling for individual items in the sidebar */\n.sidebar-container {\n    background: white;\n    padding: 0.75rem;\n    border-radius: 8px;\n    border: 1px solid white;\n    font-size: 1.2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    overflow: hidden;\n}\n\n/* Styling for the hover effect on individual sidebar items */\n.sidebar-container:hover {\n    border: 1px solid gray;\n    cursor: pointer;\n}\n\n/* Styling for the selected item in the sidebar */\n.selected {\n    background: #ffdeb3;\n    border: 1px solid #ffdeb3;\n}\n\n/* Styling for the projects title and todos title */\n.projects-title,\n.todos-title {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 1rem;\n    gap: 0.5rem;\n}\n\n/* CONTENT */\n\n.content {\n    display: flex;\n    flex-direction: column;\n    padding: 1rem;\n    margin: 0 25%;\n    color: gray;\n    min-width: 300px;\n}\n\n/* Styling for todo information */\n.todo-info {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    overflow: hidden;\n    flex: 1;\n}\n\n/* Styling for todo information and sidebar container texts */\n.todo-info span,\n.sidebar-container span {\n    display: inline-block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n/* Styling for the checkbox */\n.checkbox {\n    min-width: 1rem;\n    min-height: 1rem;\n    border-radius: 5px;\n    border: 2px solid gray;\n    background: white;\n}\n\n/* Styling for the complete checkbox */\n.complete {\n    background: url(${A}) no-repeat center;\n    background-size: fill;\n}\n\n/* Styling for the todos title */\n.todos-title {\n    font-size: 2.5rem;\n    border-bottom: 2px solid #EBF6FF;\n}\n\n\n/* Styling for the content container */\n.content-container {\n    font-size: 1.1rem;\n    padding: 1rem;\n    border-bottom: 2px solid #EBF6FF;\n    display: flex;\n    justify-content: space-between;\n    gap: 0.5rem;\n    align-items: center;\n\n}\n\n/* Styling for the hover effect on content container */\n.content-container:hover {\n    background: #EBF6FF;\n    cursor: pointer;\n}\n\n/* Styling for the date section */\n.date {\n    font-size: 0.75rem;\n    margin-left: auto;\n    white-space: nowrap;\n}\n\n/* BUTTONS */\n/* Styling for hover effect on images */\nimg:hover {\n    filter: grayscale(100%) contrast(10000%) brightness(0%);\n    cursor: pointer;\n}\n\n/* Styling for action buttons */\n.action-buttons {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 0.5rem;\n}\n\n/* Styling for add, edit, delete, and info buttons */\n.add-button,\n.edit-button,\n.delete-button,\n.info-button {\n    height: 1.5rem;\n}\n\n/* MODAL */\n\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(0, 0, 0, 0.5);\n    /* Semi-transparent black background */\n}\n\n/* Styling for the modal container */\n.modal-container {\n    background-color: white;\n    margin: 10% auto;\n    border: 1px solid gray;\n    width: max(320px, 30%);\n    display: flex;\n    flex-direction: column;\n}\n\n\n.modal-title {\n    grid-row: 1 / 2;\n    background: #1F9EFF;\n    font-size: 2rem;\n    color: white;\n    padding: 1rem 1.5rem;\n}\n\n.modal-content {\n    grid-row: 2 / 3;\n    padding: 1rem 1.5rem;\n    font-size: 1.3rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n/* DIFFERENT MODAL DISPLAY CONTAINERS */\n\n#new-project-modal,\n#edit-project-modal,\n#new-todo-modal,\n#edit-todo-modal,\n#todo-info-modal {\n    display: none;\n}\n\n\n\n#todo-info-modal .attribute-container {\n    border-bottom: 2px solid #EBF6FF;\n    padding-bottom: 1rem;\n    display: flex;\n    align-items: center;\n}\n\n.attribute-container .attribute {\n    width: 150px;\n}\n\n.attribute-container .value {\n    color: gray;\n    font-size: 1rem;\n    flex: 1;\n}\n\n.attribute-container .todo-description {\n    height: 100px;\n    overflow-y: scroll;\n}\n\n/* FORM STYLES */\n\ninput,\nselect {\n    border: 2px solid gray;\n    outline: none;\n    border-radius: 5px;\n    height: 2rem;\n    font-size: 1rem;\n    padding-left: 0.5rem;\n}\n\n.modal-content .action-buttons {\n    justify-content: flex-end;\n    gap: 1rem;\n}\n\n.required {\n    color: red;\n}\n\n.error-text {\n    display: none;\n    color: red;\n    font-size: 0.8rem;\n}\n\nbutton {\n    background: #1F9EFF;\n    color: white;\n    padding: 0.75rem;\n    border: none;\n    border-radius: 5px;\n    font-size: 1.3rem;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background: #1b87da;\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['/* Set default font-family, font-weight, and other global styles */\r\n* {\r\n    font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu,\r\n        Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\r\n    font-weight: 500;\r\n}\r\n\r\n/* Global styles for the body and grid layout */\r\nbody {\r\n    margin: 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr 4fr;\r\n    grid-template-rows: auto 1fr;\r\n    min-height: 100vh;\r\n}\r\n\r\n/* HEADER */\r\n.header {\r\n    background: #1F9EFF;\r\n    font-size: 3rem;\r\n    grid-column: span 2;\r\n    grid-row: 1 / 2;\r\n    color: white;\r\n    padding: 1rem 5rem;\r\n}\r\n\r\n/* SIDEBAR */\r\n\r\n.sidebar {\r\n    background: #ADDCFF;\r\n    grid-column: 1 / 2;\r\n    grid-row: 2 / 3;\r\n    color: gray;\r\n    font-size: 1.5rem;\r\n    padding: 2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n    min-width: 200px;\r\n}\r\n\r\n\r\n.sidebar span {\r\n    align-self: center;\r\n}\r\n\r\n/* Styling for filters and projects sections within the sidebar */\r\n.filters,\r\n.projects {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1.5rem;\r\n}\r\n\r\n/* Styling for individual items in the sidebar */\r\n.sidebar-container {\r\n    background: white;\r\n    padding: 0.75rem;\r\n    border-radius: 8px;\r\n    border: 1px solid white;\r\n    font-size: 1.2rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    overflow: hidden;\r\n}\r\n\r\n/* Styling for the hover effect on individual sidebar items */\r\n.sidebar-container:hover {\r\n    border: 1px solid gray;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Styling for the selected item in the sidebar */\r\n.selected {\r\n    background: #ffdeb3;\r\n    border: 1px solid #ffdeb3;\r\n}\r\n\r\n/* Styling for the projects title and todos title */\r\n.projects-title,\r\n.todos-title {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 0 1rem;\r\n    gap: 0.5rem;\r\n}\r\n\r\n/* CONTENT */\r\n\r\n.content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 1rem;\r\n    margin: 0 25%;\r\n    color: gray;\r\n    min-width: 300px;\r\n}\r\n\r\n/* Styling for todo information */\r\n.todo-info {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    overflow: hidden;\r\n    flex: 1;\r\n}\r\n\r\n/* Styling for todo information and sidebar container texts */\r\n.todo-info span,\r\n.sidebar-container span {\r\n    display: inline-block;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n/* Styling for the checkbox */\r\n.checkbox {\r\n    min-width: 1rem;\r\n    min-height: 1rem;\r\n    border-radius: 5px;\r\n    border: 2px solid gray;\r\n    background: white;\r\n}\r\n\r\n/* Styling for the complete checkbox */\r\n.complete {\r\n    background: url(./images/icons8-check-30.png) no-repeat center;\r\n    background-size: fill;\r\n}\r\n\r\n/* Styling for the todos title */\r\n.todos-title {\r\n    font-size: 2.5rem;\r\n    border-bottom: 2px solid #EBF6FF;\r\n}\r\n\r\n\r\n/* Styling for the content container */\r\n.content-container {\r\n    font-size: 1.1rem;\r\n    padding: 1rem;\r\n    border-bottom: 2px solid #EBF6FF;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    gap: 0.5rem;\r\n    align-items: center;\r\n\r\n}\r\n\r\n/* Styling for the hover effect on content container */\r\n.content-container:hover {\r\n    background: #EBF6FF;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Styling for the date section */\r\n.date {\r\n    font-size: 0.75rem;\r\n    margin-left: auto;\r\n    white-space: nowrap;\r\n}\r\n\r\n/* BUTTONS */\r\n/* Styling for hover effect on images */\r\nimg:hover {\r\n    filter: grayscale(100%) contrast(10000%) brightness(0%);\r\n    cursor: pointer;\r\n}\r\n\r\n/* Styling for action buttons */\r\n.action-buttons {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: 0.5rem;\r\n}\r\n\r\n/* Styling for add, edit, delete, and info buttons */\r\n.add-button,\r\n.edit-button,\r\n.delete-button,\r\n.info-button {\r\n    height: 1.5rem;\r\n}\r\n\r\n/* MODAL */\r\n\r\n.modal {\r\n    display: none;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    /* Semi-transparent black background */\r\n}\r\n\r\n/* Styling for the modal container */\r\n.modal-container {\r\n    background-color: white;\r\n    margin: 10% auto;\r\n    border: 1px solid gray;\r\n    width: max(320px, 30%);\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n\r\n.modal-title {\r\n    grid-row: 1 / 2;\r\n    background: #1F9EFF;\r\n    font-size: 2rem;\r\n    color: white;\r\n    padding: 1rem 1.5rem;\r\n}\r\n\r\n.modal-content {\r\n    grid-row: 2 / 3;\r\n    padding: 1rem 1.5rem;\r\n    font-size: 1.3rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n}\r\n\r\n/* DIFFERENT MODAL DISPLAY CONTAINERS */\r\n\r\n#new-project-modal,\r\n#edit-project-modal,\r\n#new-todo-modal,\r\n#edit-todo-modal,\r\n#todo-info-modal {\r\n    display: none;\r\n}\r\n\r\n\r\n\r\n#todo-info-modal .attribute-container {\r\n    border-bottom: 2px solid #EBF6FF;\r\n    padding-bottom: 1rem;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.attribute-container .attribute {\r\n    width: 150px;\r\n}\r\n\r\n.attribute-container .value {\r\n    color: gray;\r\n    font-size: 1rem;\r\n    flex: 1;\r\n}\r\n\r\n.attribute-container .todo-description {\r\n    height: 100px;\r\n    overflow-y: scroll;\r\n}\r\n\r\n/* FORM STYLES */\r\n\r\ninput,\r\nselect {\r\n    border: 2px solid gray;\r\n    outline: none;\r\n    border-radius: 5px;\r\n    height: 2rem;\r\n    font-size: 1rem;\r\n    padding-left: 0.5rem;\r\n}\r\n\r\n.modal-content .action-buttons {\r\n    justify-content: flex-end;\r\n    gap: 1rem;\r\n}\r\n\r\n.required {\r\n    color: red;\r\n}\r\n\r\n.error-text {\r\n    display: none;\r\n    color: red;\r\n    font-size: 0.8rem;\r\n}\r\n\r\nbutton {\r\n    background: #1F9EFF;\r\n    color: white;\r\n    padding: 0.75rem;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 1.3rem;\r\n    cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n    background: #1b87da;\r\n}'],sourceRoot:""}]);const u=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var d={};if(o)for(var l=0;l<this.length;l++){var a=this[l][0];null!=a&&(d[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);o&&d[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},d=[],l=0;l<e.length;l++){var a=e[l],c=o.base?a[0]+o.base:a[0],s=i[c]||0,A="".concat(c," ").concat(s);i[c]=s+1;var u=n(A),p={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=r(p,o);o.byIndex=l,t.splice(l,0,{identifier:A,updater:f,references:1})}d.push(A)}return d}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var d=0;d<i.length;d++){var l=n(i[d]);t[l].references--}for(var a=o(e,r),c=0;c<i.length;c++){var s=n(i[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=a}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},718:(e,t,n)=>{e.exports=n.p+"1f83024f4bb8dc3ad757.png"}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),d=n.n(i),l=n(565),a=n.n(l),c=n(216),s=n.n(c),A=n(589),u=n.n(A),p=n(426),f={};f.styleTagTransform=u(),f.setAttributes=a(),f.insert=d().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=s(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const m=(()=>{let e=[{title:"First Project",todos:[{title:"Walk my dog",description:"I need to walk my dog today.",date:"2023-07-16",priority:"high",complete:!1,projectTitle:"First Project"}],selected:!1}];const t=()=>{let t=[];for(let n of e)for(let e of n.todos)t.push(e);return t},n=()=>t().filter((e=>"high"===e.priority)),o=()=>t().filter((e=>e.complete)),r=()=>{const e=t(),n=new Date;return e.filter((e=>{const t=d(e.date);return t.getDate()===n.getDate()&&t.getMonth()===n.getMonth()&&t.getFullYear()===n.getFullYear()}))},i=()=>{const e=t(),n=new Date,o=new Date;return o.setDate(o.getDate()+7),e.filter((e=>{const t=d(e.date);return n<=t&&t<=o}))},d=e=>{const[t,n,o]=e.split("-");return new Date(t,n-1,o)};let l=[{title:"All",todos:t(),selected:!1},{title:"Today",todos:r(),selected:!1},{title:"This Week",todos:i(),selected:!1},{title:"Important",todos:n(),selected:!1},{title:"Completed",todos:o(),selected:!1}];const{projects:a,filters:c}=(()=>{const t=localStorage.getItem("projects"),n=localStorage.getItem("filters");return t&&n?{projects:JSON.parse(t),filters:JSON.parse(n)}:{projects:e,filters:l}})();return e=a,l=c,{projects:e,filters:l,getAllFilters:()=>{(()=>{const e=l.find((e=>"All"===e.title)),d=l.find((e=>"Important"===e.title)),a=l.find((e=>"Completed"===e.title)),c=l.find((e=>"Today"===e.title)),s=l.find((e=>"This Week"===e.title));e.todos=t(),d.todos=n(),a.todos=o(),c.todos=r(),s.todos=i()})();let d=[];for(let e of l)d.push(e);for(let t of e)d.push(t);return d},saveToLocalStorage:()=>{localStorage.setItem("projects",JSON.stringify(e)),localStorage.setItem("filters",JSON.stringify(l))}}})();class g{constructor(e){this.title=e,this.todos=[],this.selected=!1}}const C={newProjectModal:{element:document.querySelector("#new-project-modal"),titleField:document.querySelector("#new-project-modal .project-title"),emptyErrorText:document.querySelector("#new-project-modal .empty"),takenErrorText:document.querySelector("#new-project-modal .taken")},editProjectModal:{element:document.querySelector("#edit-project-modal"),titleField:document.querySelector("#edit-project-modal .project-title"),emptyErrorText:document.querySelector("#edit-project-modal .empty"),takenErrorText:document.querySelector("#edit-project-modal .taken")},newTodoModal:{element:document.querySelector("#new-todo-modal"),titleField:document.querySelector("#new-todo-modal .todo-title"),descField:document.querySelector("#new-todo-modal .todo-description"),dueDateField:document.querySelector("#new-todo-modal .todo-date"),priorityField:document.querySelector("#new-todo-modal .todo-priority"),emptyErrorText:document.querySelector("#new-todo-modal .empty")},editTodoModal:{element:document.querySelector("#edit-todo-modal"),titleField:document.querySelector("#edit-todo-modal .todo-title"),descField:document.querySelector("#edit-todo-modal .todo-description"),dueDateField:document.querySelector("#edit-todo-modal .todo-date"),priorityField:document.querySelector("#edit-todo-modal .todo-priority"),emptyErrorText:document.querySelector("#edit-todo-modal .empty")},todoInfoModal:{element:document.querySelector("#todo-info-modal"),titleField:document.querySelector("#todo-info-modal .todo-title"),descField:document.querySelector("#todo-info-modal .todo-description"),dueDateField:document.querySelector("#todo-info-modal .todo-date"),priorityField:document.querySelector("#todo-info-modal .todo-priority"),completeField:document.querySelector("#todo-info-modal .todo-complete"),projectField:document.querySelector("#todo-info-modal .todo-project")}};class y{constructor(e,t,n,o,r){this.title=e,this.description=t,this.date=n,this.priority=o,this.complete=!1,this.projectTitle=r}}const B=(()=>{const e=document.querySelector(".new-project-button"),t=document.querySelector(".modal"),n=document.querySelectorAll(".confirm-button");let o,r;function i(e){return e.target.closest(".content-container").getAttribute("index")}function d(e){return A().todos[e]}function l(e){const t=e.titleField.value,n=A().title;if(t)if(e!==C.newProjectModal&&e!==C.editProjectModal||!function(e){return m.getAllFilters().find((t=>t.title===e))}(t)||r.title===t){if(e===C.newProjectModal)!function(e){const t=new g(e);m.projects.push(t)}(t);else if(e===C.editProjectModal)!function(e,t){e.title=t,e.todos.map((e=>e.projectTitle=t))}(r,t);else if(e===C.newTodoModal)!function(e,t,n,o,r){const i=new y(e,t,n,o,r);A().todos.push(i)}(t,e.descField.value,e.dueDateField.value,e.priorityField.value,n);else if(e===C.editTodoModal){const n=e.descField.value,r=e.dueDateField.value,i=e.priorityField.value;!function(e,t,n,o,r){e.title=t,e.description=n,e.date=o,e.priority=r}(A().todos[o],t,n,r,i)}v.closeModal(e),m.saveToLocalStorage(),v.updateDisplay()}else v.toggleErrorMessages(e,!1,!0);else v.toggleErrorMessages(e,!0,!1)}function a(){A()&&(A().selected=!1)}function c(e){e.selected=!0}function s(e){const t=e.target.closest(".sidebar-container").getAttribute("title");return m.getAllFilters().find((e=>e.title===t))}function A(){return m.getAllFilters().find((e=>e.selected))}function u(){let e=null;for(let t in C)if(C.hasOwnProperty(t)){const n=C[t];"block"===n.element.style.display&&(e=n)}return e}return e.addEventListener("click",(e=>{v.displayModal(e,C.newProjectModal)})),t.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("cancel-button"))&&v.closeModal(u())})),n.forEach((e=>{e.addEventListener("click",(()=>{l(u())})),document.addEventListener("keydown",(e=>{"Enter"===e.key&&"block"===t.style.display&&l(u())}))})),{handleEditButtonClick:function(e,t){"todo"===t&&(o=i(e),v.displayModal(e,C.editTodoModal,o)),"project"===t&&(r=s(e),v.displayModal(e,C.editProjectModal))},handleDeleteButtonClick:function(e,t){"todo"===t&&function(e){const t=d(e),n=t.projectTitle,o=m.projects.find((e=>e.title===n)),r=o.todos.findIndex((e=>e==t));o.todos.splice(r,1)}(i(e)),"project"===t&&function(e){const t=m.projects.findIndex((t=>t===e));m.projects.splice(t,1)}(s(e)),m.saveToLocalStorage(),v.updateDisplay()},handleTodoClick:function(e){!function(e){const t=d(e);t.complete=!t.complete}(i(e)),m.saveToLocalStorage(),v.updateDisplay()},handleTodoInfoClick:function(e){o=i(e),v.displayModal(e,C.todoInfoModal,o)},handleFilterClick:function(e){r=s(e),a(),c(r),m.saveToLocalStorage(),v.updateDisplay()},HandleNewTodoClick:function(e){v.displayModal(e,C.newTodoModal)},setDefaultFilter:function(){A()||(m.filters.find((e=>"All"===e.title)).selected=!0)},getSelectedFilter:A,getFilterObject:s,unselectProject:a,selectProject:c,addClickListener:function(e,t){e.addEventListener("click",(e=>{e.stopPropagation(),t(e)}))}}})(),b=n.p+"458b2689773a37856753.png",h=n.p+"8c8587a4ebfbc28b42c5.png",I=n.p+"5765e94f9d12c9a38d35.png",x=n.p+"a3a2abc29339d2d71d25.png",v=(()=>{const e=document.querySelector(".modal"),t=document.querySelector(".projects"),n=document.querySelector(".todos"),o=document.querySelector(".filters"),r=document.querySelector(".todos-title"),i=r.querySelector("span");function d(e,t="",n="",o="",r="",i="",d=""){e.element.style.display="block",e===C.todoInfoModal?(r=r.charAt(0).toUpperCase()+r.slice(1),e.titleField.textContent=t,e.descField.textContent=n,e.dueDateField.textContent=o,e.priorityField.textContent=r,e.completeField.textContent=i?"Yes":"No",e.projectField.textContent=d):(e.titleField.value=t,e.titleField.focus(),e===C.editTodoModal&&(e.descField.value=n,e.dueDateField.value=o,e.priorityField.querySelector("option[value="+r+"]").selected=!0))}function l(e,t,n){e.emptyErrorText.style.display=t?"block":"none",e!==C.newProjectModal&&e!==C.editProjectModal||(e.takenErrorText.style.display=n?"block":"none")}function a(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function c(e,t,n){e.complete&&(t.classList.add("complete"),n.style.textDecoration="line-through"),"low"===e.priority&&(n.style.color="#32CD32"),"medium"===e.priority&&(n.style.color="#DAA520"),"high"===e.priority&&(n.style.color="#FF6347")}function s(e){e.classList.add("selected")}return{displayModal:function(t,n,o=null){if(e.style.display="block",n!==C.newProjectModal&&n!==C.newTodoModal||d(n),n===C.editTodoModal||n===C.todoInfoModal){const e=B.getSelectedFilter().todos[o],t=e.title,r=e.description,i=e.date,l=e.priority;if(n===C.todoInfoModal){const o=e.complete,a=e.projectTitle;d(n,t,r,i,l,o,m.projects.find((e=>e.title===a)).title)}else d(n,t,r,i,l)}n===C.editProjectModal&&d(n,B.getFilterObject(t).title)},closeModal:function(t){e.style.display="none",t.element.style.display="none",t!==C.todoInfoModal&&function(e){l(e,!1,!1),e.titleField.value="",e===C.newTodoModal&&(e.descField.value="",e.dueDateField.value="",e.priorityField.selectedIndex=0)}(t)},toggleErrorMessages:l,updateDisplay:function(){B.setDefaultFilter(),r.childElementCount>1&&r.removeChild(r.lastChild),a(t),a(o),a(n),i.textContent=B.getSelectedFilter().title,m.projects.includes(B.getSelectedFilter())&&function(){const e=new Image;e.src=I,e.classList.add("add-button"),e.classList.add("new-todo-button"),e.addEventListener("click",(e=>{B.HandleNewTodoClick(e)})),r.appendChild(e)}(),function(){for(let e=0;e<m.filters.length;e++){const t=document.createElement("div");t.classList.add("sidebar-container"),t.setAttribute("title",m.filters[e].title),B.addClickListener(t,(e=>{B.handleFilterClick(e)})),m.filters[e].selected&&s(t);const n=document.createElement("span");n.textContent=m.filters[e].title,t.appendChild(n),o.appendChild(t)}}(),function(){for(let e=0;e<m.projects.length;e++){const n=document.createElement("div");n.classList.add("sidebar-container"),n.setAttribute("title",m.projects[e].title),B.addClickListener(n,(e=>{B.handleFilterClick(e)})),m.projects[e].selected&&s(n);const o=document.createElement("span");o.textContent=m.projects[e].title;const r=document.createElement("div");r.classList.add("action-buttons");const i=new Image;if(i.src=b,i.classList.add("edit-button"),i.classList.add("edit-project-button"),B.addClickListener(i,(e=>{B.handleEditButtonClick(e,"project")})),m.projects.length>1){const e=new Image;e.src=h,e.classList.add("delete-button"),e.classList.add("delete-project-button"),B.addClickListener(e,(e=>{B.handleDeleteButtonClick(e,"project")})),r.append(i,e)}else r.appendChild(i);n.append(o,r),t.appendChild(n)}}(),function(){const e=B.getSelectedFilter().todos;for(let t=0;t<e.length;t++){const o=document.createElement("div");o.classList.add("content-container"),o.setAttribute("index",t),o.addEventListener("click",B.handleTodoClick);const r=document.createElement("div");r.classList.add("todo-info");const i=document.createElement("div");i.classList.add("checkbox");const d=document.createElement("span");d.textContent=e[t].title;const l=document.createElement("div");l.classList.add("date"),l.textContent=e[t].date,c(e[t],i,d),r.append(i,d,l);const a=document.createElement("div");a.classList.add("action-buttons");const s=new Image;s.src=b,s.classList.add("edit-button"),s.classList.add("edit-todo-button"),B.addClickListener(s,(e=>{B.handleEditButtonClick(e,"todo")}));const A=new Image;A.src=h,A.classList.add("delete-button"),A.classList.add("delete-todo-button"),B.addClickListener(A,(e=>{B.handleDeleteButtonClick(e,"todo")}));const u=new Image;u.src=x,u.classList.add("info-button"),B.addClickListener(u,(e=>{B.handleTodoInfoClick(e)})),a.append(s,A,u),o.append(r,a),n.appendChild(o)}}()}}})();B.unselectProject(),B.selectProject(m.filters[0]),v.updateDisplay()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,